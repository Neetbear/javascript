자바스크립트 프로토타입 기반 객체지향 프로그래밍 언어 <-> java, c++과 같은 클래스 기반 객체지향 프로그래밍 언어
    객체 - object 실생활에서 쓰는 모든 것 (클래스라는 틀에서 생겨난 실체이다)
    객체 지향 프로그램 - 객체와 객체 간의 연결로 되어 있으며 각각의 객체 안에 자료구조와 알고르즘이 들어있는 것이다
                        https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F998992425B3768AA23
                        객체 지향 모델링은 기능이 아닌 객체가 중심이 되며 "누가 어떤 일을 할 것인가?"가 핵심이 된다. 
                        즉, 객체를 도출하고 각각의 역할을 정의해 나가는 것에 초점을 맞춘다.
    % 절차 지향 - 절차 지향 모델링은 프로그램을 기능중심으로 바라보는 방식으로 "무엇을 어떤 절차로 할 것인가?"가 핵심이 된다. 
                  즉, 어떤 기능을 어떤 순서로 처리하는가에 초점을 맞춘다.
    프로토타입 기반 객체지향 프로그래밍 언어 - 프로토타입 기반 프로그래밍은 객체지향 프로그래밍의 한 형태의 갈래로 클래스가 없고, 
                                    클래스 기반 언어에서 상속을 사용하는 것과는 다르게, 
                                    객체를 원형(프로토타입)으로 하여 복제의 과정을 통하여 객체의 동작 방식을 다시 사용할 수 있다.
    

자바스크립트 내부에 script로 쓰거나 외부 js파일 src로 불러오기

변수와 자료형
    자바스크립트는 동적(sync)언어 / nodejs콜백함수는 비동기함수(async)임 js라고 혼란하지 말것
    var로 쓰고 int 이런식으로 변수에 타입지정까지 같이 안함
    
    primitive 기본형 /변수에 할당 시 실제 값 저장 (call by value -> 값만 처리한다)
    object JSON등 자바스크립트의 거의 모든것 /할당 시 변수에 메모리 주소(참조값)이 저장된다(call by reference -> 참조한다)
        object타입과 primitive type을 나누는 주된 기준은 수정 가능 여부 
            primitive는 변경 불가능한 값 수정시 새로운 주소에 값이 할당된다

변수 선언 var(지역변수 함수 범위에서 유효 -> 함수 종료전까지 유효) let const(불변의)
    var와 let const 차이점 
        var는 중복 선언 가능
    var를 선언하지 않으면 자동으로 전역변수 (변수 스코프 확인하기)
        var jbVar = 'Lorem';
        function jbFunc() {
            var jbVar = 'Ipsum';    출력 Lorem 지역변수니까
            jbVar = 'Ipsum';        출력 Ipsum 전역변수 선언이니까
        }
        document.write( jbVar ); 
    let const는 블록 스코프? (중괄호{}를 블록으로 생각하면 됨)
        if(true) {
            var var_name = "javascript";
            let let_name = "nodejs";
        }
        console.log(var_name);  출력됨 지역변수니까
        console.log(let_name);  에러 블록스코프니까 블록밖에선 호출불가
    const는 재할당 불가/ 초기화시 값 할당 필수 
        재할당시 assignment error

호이스팅
    다른언어와 달리 문법적 오류를 자바스크립트가 자동으로 고쳐주는 기능이 몇개 있는데 그 중 하나 
    본래 변수의 선언문을 먼저 하고 시작하는게 문법적으로 옳으나 
    자바스크립트는 var를 통해 정의된 변수의 선언문을 유효범위의 최상단으로 끌어올려준다.

타입 number, string, boolean, null(메모리에 할당 안된 상태), undefined(타입이 정해지지 않은 상태)
    BigInt(너무 큰 수등을 쓸때 사용하는 타입) / symbol (키 값등 유일하고 변경 불가능한 기본값)
    object 자바스크립트의 기본 타입, property나 method 같은 이름으로 묶어놓은 일종의 집합체 / JSON등의 타입도 object

타입변환(type conversion/ 다른 언어는 type casting 문제는 둘이 좀 다름)
    implicit type conversion 묵시적 타입 변환 (문자열인 "3"을 연산자 때문에 숫자 3으로 변환 등)
    자동으로 타입 변환할 수 없으면 NaN

    explicit type consversion 명시적 타입 변환 (Number("10")하면 string인 10을 number 10으로 변환해줌)
        함수 String(true);       문자로 형변환하여 반환
        메서드 true.toString();  객체를 표현한 문자열을 반환 

연산자 
    산술연산자 + - * / %(나머지) 
    대입연산자 = (우항을 좌항에 대입) += -= *= /= %=
    증감연산자 ++ -- (피연산자 앞에 쓰면 증감 후 해당 연산 진행, 뒤에 쓰면 연산 진행 후에 증감)
    비교연산자 < <= > >=  == ===(타입까지 비교) !=(!는 not 다르냐는 의미) !== 
        타입이 달라서 비교 못하는 경우에는 false 반환
    논리연산자 &&(and) ||(or) 
    기타연산자 
        문자열 결합 연산자 var x = "좋은" + "하루되세요";
        삼항연산자 
            var x = 3, y =5;
            var result = (x > y) ? x : y ; (조건이 true면 x 대입 false면 y 대입) -> if / else 문으로 쓸거 한줄에 끝남
                삼항연산자 안에 또 삼항연산자 쓰는 것도 가능
                    var result = (x > y) ? ((x < y) ? x : y) : y ;
        쉼표연산자 
            for문 같은데서 사용하는 , 쉼표 생각하기
        delete 연산자 
            피연산자인 객체, property 또는 배열의 요소 등을 삭제
            삭제 성공시 true, 실패시 false
            var arr = [1,2,3];
            delete arr[2]; 
                단 배열의 자리는 남아있음 요소만 삭제
        typeOf 
            타입 출력
        instanceof 
            피연산자인 객체가 특정 객체의 인스턴스인지 아닌지 확인하기 -> 쓸일 없다
            선언해서 할당 해준게 있으면 true, 아니면 false 
            걍 Array 선언된거 있어? 이런식으로 물어보는 느낌
        void
            값을 생성하는 표현식을 평가해서 undefined를 반환합니다. 나중에 다른 언어에서 배워라

제어문 
    if
    if/else
    if/else if/ else
    switch 
        표현식의 값에 해당하는 case 실행하고 break; -> break; 안적으면 그 아래 case도 실행해버린다
        switchcase.html확인해보기
    제어문 기본꼴 
        제어문 (조건) {조건에 맞으면 실행할거}

반복문
    while
    do/while
    for
    for in 
        for (key in Object(JSON등등))
    for of 
        for (var x of Array)
    forEach
        foreach 반복문은 오직 Array 객체에서만 사용가능한 메서드
        배열의 요소들을 반복하여 작업을 수행
        -> iteratemapforEach 공부하기
    break
    continue
    label -> 반복문 구분할라고 라벨 (이름표) 달아주는거 label : 반복문

배열(array)
    이름과 인덱스로 참조되는 집합으로 정의된다
    var 배열 이름 = [집합];
    인덱스는 0부터 시작하는 요소의 배열에서의 위치 값 
    배열 요소의 타입이 고정되어 있지 않으며 요소가 없어도 된다. 
        var arr1 = [1, , "0", new today()] 가능
    선언
        var array = []; or var array = new Array;

    JSON은 key:value로 묶인 배열

    주요 메서드
        push() / pop()      맨끝에 값을 추가 / 제거 (제거하면서 반환함 찍으면 제거한거 찍힘)
        unshift() / shift() 맨앞에 값을 추가 / 제거 -> 요소만 제거가 아니라 index까지 제거한다는 소리임
            
            stack : Stack은 ADT(추상 자료형)의 일종이다.ADT(Abstract Data Type)는 데이터의 구체적인 구현 방식은 생략하고, 
                    데이터의 추상적 형태와 그 데이터를 다루는 방법만을 정해놓은 것
                    나중에 집어넣은 데이터가 먼저 나온다 (stack도 선형 자료형)
            que   : 데이터를 집어넣을 수 있는 선형(linear) 자료형으로 먼저 집어넣은 데이터가 먼저 나옵니다

        splice()    배열값을 추가하거나 제거해서 반환 
            -> fruits.splice(2, 0, "Lemon", "Kiwi") [2]부터 0개 지우고 레몬 키위만 반환
        
        reverse()   배열 역순 재배치
        sort()      배열 데이터 정렬  
            기본 정렬 순서는 문자열의 유니코드 코드 포인트
            sort 종류 여러개이니까 따로 공부

        concat()    두 배열 병합 -> 요소만 추가도 가능 = push 느낌
        join()      배열 구분자 지정하기
        slice()     배열 일부 지정해서 가져옴

        toString    특정한 Number 객체를 나타내는 문자열을 반환합니다.
    
    데이터 순회
        map() -> map으로 배열을 콜백 함수의 조건으로 변경된 새로운 배열 만드는 느낌
            모든 배열 데이터 마다 반복처리
            new map()으로 선언하고 map.set()으로 키와 값 추가
            object의 키는 문자열이지만 map은 모든값 
            실행시점까지 키를 알 수 없고 모든 키가 동일한 타입이면 map사용이 좋다

            forEach
                -> iteratemapforEach 공부하기

        filter()    특정 조건 만족하는 데이터만 처리

        reduce()    모든 데이터를 순회하면서 누적 연산 

함수(function)
    자바스크립트는 함수를 변수에 할당할 수 있으며 인자로 전달하거나 콜백 함수를 구현하는 형태 등 다양한 함수 활용
    함수형 프로그래밍이라고 부른다 c, c++에서부터 

    함수 선언 
        function calc (a,b){
            let sum1 = a + b;
            sum2 = a + b;
            return sum1;
        }
        console.log(calc(20,30)); return 20+30으로 50 출력
        console.log(sum2); -> 전역변수 50
        console.log(sum1); -> 지역변수 error
    
        return 명령문은 함수 실행을 종료하고, 주어진 값을 함수 호출 지점으로 반환

    익명함수
        함수명 대신 변수명에 함수 코드를 저장하는 구현 방식
        호출 시 변수명을 함수명처럼 사용
    콜백함수 
        다른 함수에 변수로 넘겨준 함수를 말하며
        변수로 넘겨받은 함수는 일단 넘겨받고, 때가 되면 나중에 호출(called back)해서 사용
            -> 함수를 메모리에 던져두고 필요할 때 콜백해서 사용하는 느낌
        참고로 callback은 예약어 아니다
        변수에 익명함수를 할당하고 필요한 자리에 변수를 쓰나 콜백함수 쓸자리에 함수를 직접쓰나 똑같이 구동한다 (스코프가 같을때는)

    자료 구조 값에 함수 사용
        함수를 object 속성으로 사용하거나 map의 value 혹은 배열의 원소로도 사용 가능

object와 class   
    object는 property와 method로 정의할 수 있고 객체를 정의할 수 있는 틀을 class라고 한다. (array 같은걸 class로 만든거?)
        class Array {
            pro;
            method;
        }                      
        let abc = new Array(); -> 인스턴스화 (메모리에 할당된다) -> 할당해야 사용한다
        참조형이다.
        object는 property의 모음이며 속성은 key:value 구조
        속성 값이 함수인 경우 method
    
    객체 리터럴을 이용한 Json 생성 
        let JSON name = {
            key:value,
            key:value,
            ...
        }
     
    생성자를 이용한 객체 생성? 함수방식
        this.getInfo하면서 함수 형식으로 쓰는 방식인데 그냥 class 방식 사용해라
        객체를 생성할 때마다 동일한 함수도 매번 생성하는 방식이라 매우 비효율적이며 코드 관리도 불편하다

    함수 선언과 클래스 선언의 중요한 차이점은 함수 선언의 경우 호이스팅이 일어나지만, 클래스 선언은 그렇지 않다는 것
    클래스를 사용하기 위해서는 클래스를 먼저 선언 해야 한다 아니면 ReferenceError

    class 객체 지향적 방식(함수아니고 object임)
        get, set 사용해서 object 내용을 감춘다 (인캡슐레이션)
        method class에선 getInfo()가 그냥 method

        class Product {
            constructor(A, B) {
                this.A = A; (key: value)
                this.B = B;
            }
            getInfo() {
                return this.A + this.B;
            }
            get propName() {
                // getter, obj.propName을 실행할 때 실행되는 코드
                return this.A + this.B;
            },

            set propName(value) {
                // setter, obj.propNAme = value를 실행할 때 실행되는 코드
                [this.A, this.B] = value.split(" ");
            }
        }
        class 구조 잘봐두기 -> getter setter랑 getInfo()

    클래스 내부에서 선언한 속성은 클래스 인스턴스를 가리키는 this에 바인딩한다. 
    this는 클래스가 메모리에 객체화된 자신을 가리키는 것
    인스턴스화 메모리에 할당된다

=============================================================================

    프레임워크 - 프레임워크는 뼈대나 기반구조를 뜻하고, 제어의 역전 개념이 적용된 대표적인 기술
              소프트웨어에서의 프레임워크는 '소프트웨어의 특정 문제를 해결하기 위해서 상호 협력하는 클래스와 인터페이스의 집합' 이라 할 수 있으며, 완성된 어플리케이션이 아닌 프로그래머가 완성시키는 작업을 해야합니다
              
    라이브러리 - 라이브러리는 단순 활용가능한 도구들의 집합을 말합니다.
              즉, 개발자가 만든 클래스에서 호출하여 사용, 클래스들의 나열로 필요한 클래스를 불러서 사용하는 방식을 취하고 있습니다

================================
비동기 처리 
    특정 코드의 실행이 완료될 때까지 기다리지 않고 다음 코드를 먼저 수행하는 자바스크립트의 특성

1. promise 
2. Micro Task queue 
3. Closure 
4. Callstack 
5. Higher Order Function 
6. async await